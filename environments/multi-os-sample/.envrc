# Environment configuration for ol810-test using database-cluster module
# This file is automatically sourced when entering the directory (requires direnv)

# Instance configuration
export TF_VAR_my_ip=$(curl -s https://api.ipify.org)
export TF_VAR_instance_type="c5.4xlarge"
export TF_VAR_instance_type="c7i.4xlarge"
export TF_VAR_instance_type="c7i.xlarge"
export TF_VAR_vm_count=1

export TF_VAR_use_spot_instances="true"  # Temporarily disabled for testing
export TF_VAR_spot_max_price="0.50"  # Maximum price for spot instances (USD/hour)
export TF_VAR_allow_remote_ssh_access="false"  # Set to "true" when remote team needs SSH access
export TF_VAR_enable_monitoring="false"

# Cloudberry environment options
export CLOUDBERRY_AUTO_SPOT_CHECK="true"  # Set to "false" to disable automatic spot checking

## ======================================================================
# AMI configuration
## ----------------------------------------------------------------------

## Rocky Linux 9
AMI_OWNER="679593333241"
AMI_FILTER='Rocky-9-EC2-Base-9.*x86_64*'
export TF_VAR_default_username="rocky"

## ======================================================================

# AWS SSO profile
SSO_PROFILE="sso-profile"

## ======================================================================
## NO need to edit below values
## ======================================================================

CURRENT_DIR=${PWD##*/}
export TF_VAR_env_prefix=${USER}-$CURRENT_DIR
export TF_VAR_region=us-west-2

if ! aws configure export-credentials --profile $SSO_PROFILE &>/dev/null; then
 echo "Warning: AWS credentials expired. Run: aws sso login --sso-session $SSO_PROFILE "
 return 1
fi

# AWS credentials
credentials=$(aws configure export-credentials --profile $SSO_PROFILE)
export AWS_ACCESS_KEY_ID=$(echo "$credentials" | jq -r '.AccessKeyId')
export AWS_SECRET_ACCESS_KEY=$(echo "$credentials" | jq -r '.SecretAccessKey')
export AWS_SESSION_TOKEN=$(echo "$credentials" | jq -r '.SessionToken')

# Check for .terraform directory
if [ ! -d .terraform ]; then
  echo "Please run: terraform init"
  return 1
fi

# Fetch latest AMI
latest_ami=$(aws ec2 describe-images --region $TF_VAR_region \
 --owners $AMI_OWNER \
 --filters "Name=name,Values=$AMI_FILTER" \
 --query 'Images | sort_by(@, &CreationDate) | [-1].ImageId' \
 --output text)

# Validate AMI
if [ "$latest_ami" = 'None' ]; then
 echo "Error: No AMI found matching specified criteria:"
 echo "  Owner: $AMI_OWNER"
 echo "  Filter: $AMI_FILTER"
 echo "  Region: $TF_VAR_region"
 return 1
fi

# Set AMI and display info
export TF_VAR_ami=$latest_ami
ami_info=$(aws ec2 describe-images --region $TF_VAR_region \
  --owners $AMI_OWNER \
  --filters "Name=name,Values=$AMI_FILTER" \
  --query 'sort_by(Images, &CreationDate)[-1]')

# Determine environment state (check instance via AWS API)
if [ -d .terraform ]; then
  # Check if instance exists and get its state
  instance_state=$(aws ec2 describe-instances --region $TF_VAR_region \
    --filters "Name=tag:Name,Values=${TF_VAR_env_prefix}-instance-0" "Name=instance-state-name,Values=running,stopped,pending,stopping,shutting-down" \
    --query 'Reservations[0].Instances[0].State.Name' --output text 2>/dev/null)

  if [ "$instance_state" != "None" ] && [ -n "$instance_state" ]; then
    case "$instance_state" in
      "running") env_status="üü¢ ACTIVE" ;;
      "stopped") env_status="üü° STOPPED" ;;
      "pending"|"stopping"|"shutting-down") env_status="üîÑ TRANSITIONING" ;;
      *) env_status="üîµ PROVISIONED" ;;
    esac
  else
    env_status="üî¥ UNINITIALIZED"
  fi
else
  env_status="üî¥ UNINITIALIZED"
fi

# Determine spot instance status (query actual Terraform value)
spot_value=$(echo "var.use_spot_instances" | terraform console 2>/dev/null | grep -E "^(true|false)$" | head -1 | tr -d '"' | tr -d ' ')
if [ "$spot_value" = "true" ]; then
  spot_status="üü¢ ENABLED"
elif [ "$spot_value" = "false" ]; then
  spot_status="üî¥ DISABLED"
else
  spot_status="‚ùì UNKNOWN"
fi

# Determine remote SSH access status (query actual Terraform value)
ssh_value=$(echo "var.allow_remote_ssh_access" | terraform console 2>/dev/null | grep -E "^(true|false)$" | head -1 | tr -d '"' | tr -d ' ')
if [ "$ssh_value" = "true" ]; then
  ssh_status="üîì OPEN (0.0.0.0/0)"
elif [ "$ssh_value" = "false" ]; then
  ssh_status="üîí RESTRICTED (${TF_VAR_my_ip}/32)"
else
  ssh_status="‚ùì UNKNOWN"
fi

# Determine monitoring status (query actual Terraform value)
monitoring_value=$(echo "var.enable_monitoring" | terraform console 2>/dev/null | grep -E "^(true|false)$" | head -1 | tr -d '"' | tr -d ' ')
if [ "$monitoring_value" = "true" ]; then
  monitoring_status="üìä ENABLED"
elif [ "$monitoring_value" = "false" ]; then
  monitoring_status="üìä DISABLED"
else
  monitoring_status="‚ùì UNKNOWN"
fi

echo ""
echo "======================================================================"
echo "üîß Environment: $(basename $PWD) | Status: $env_status"
echo "----------------------------------------------------------------------"
echo " - AMI Name: $(echo "$ami_info" | jq -r '.Name')"
echo " - AMI Description: $(echo "$ami_info" | jq -r '.Description')"
echo " - AMI ID: $TF_VAR_ami"
echo " - Region: $TF_VAR_region"
echo " - Instance Type: $TF_VAR_instance_type"
echo " - VM Count: $TF_VAR_vm_count"
echo " - Default User: $TF_VAR_default_username"
echo " - User IP: $TF_VAR_my_ip"
echo " - Spot Instances: $spot_status"
echo " - SSH Access: $ssh_status"
echo " - Monitoring: $monitoring_status"
echo "======================================================================"
echo ""

# Simple spot instance reminder when enabled
if [[ "$spot_value" == "true" && "$TF_VAR_use_spot_instances" == "true" ]]; then
    echo "üí° Spot instances enabled - consider running 'spot-check' before terraform apply"
    echo ""
fi

# SSH key path (override .env file since TF_VAR_env_prefix is set here)
export SSH_KEY_PATH="${TF_VAR_env_prefix}_generated_key.pem"

# Load helper functions from .env file
source .env

# Centralized cloudberry tools (direnv-compatible functions)
REPO_ROOT="$(cd ../.. && pwd)"
spot-check() { "$REPO_ROOT/bin/spot-check" "$@"; }
